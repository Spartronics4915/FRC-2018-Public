import java.text.SimpleDateFormat;
import java.io.ByteArrayOutputStream;

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath 'gov.nist.math:jama:1.0.3'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

plugins {
    id "java"
    id "jaci.openrio.gradle.GradleRIO" version "2018.03.06"
    id 'war' // For the path webapp
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations  {
    lidarLibs  // config to hold jars to include in an app jar
    pathWebappLibs
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.bmuschko.tomcat'

def TEAM = 4915
def ROBOT_CLASS = "com.spartronics4915.frc2019.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
            if (!project.hasProperty("discover"))
                addresses = [ "10.49.15.2" ]
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

wpi {
    // We use a newer version than the default one for 2018
    ctreVersion = "5.3.1.0"
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX),
// and deps for spring/lidar websockets (lidar standalone app)/path webapp
dependencies {
    compile wpilib()
    compile ctre()
    compile("gov.nist.math:jama:1.0.3")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")

    compile ("org.java-websocket:Java-WebSocket:1.3.9")
    lidarLibs group: "org.java-websocket", name: "Java-WebSocket", version:"1.3.9"

    def tomcatVersion = '7.0.57'
    tomcat ("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    tomcat ("org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}")
    tomcat ("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    compile ("org.springframework:spring-webmvc:4.3.0.RELEASE")
    compile ("javax.servlet:javax.servlet-api:3.0.1")
    compile ("javax.servlet:jstl:1.2")
    pathWebappLibs group: "org.springframework", name: "spring-webmvc", version: "4.3.0.RELEASE"
    pathWebappLibs group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
    pathWebappLibs group: "javax.servlet", name: "jstl", version: "1.2"
}

// context where tomcat is deployed, by default localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'

// Setting up my Jar File. In this case, adding all libraries (except path/lidar standalone
// build libs) into the main jar ('fat jar') in order to make them all available at runtime.
// Also adding the manifest so WPILib knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        String user = System.getProperty("user.name");
        SimpleDateFormat fmt = new SimpleDateFormat("MMMMM dd, hh:mm a");
        ByteArrayOutputStream gitinfo = new ByteArrayOutputStream();
        exec {
            ignoreExitValue true
            commandLine 'git', 'describe', "--tags", "--dirty"
            standardOutput = gitinfo
        }
        attributes (
            "Built-By": user,
            "Built-At": fmt.format(new Date()),
            "Code-Version": gitinfo.toString().trim()
        )
    }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
    from(sourceSets.main.output) {
        exclude "com/spartronics4915/lidar/**"
        exclude "com/spartronics4915/path/**"
    }
}

task lidarTest(type: Jar) {
    baseName "LidarTest"
    from configurations.lidarLibs.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes "Main-Class": "com.spartronics4915.lidar.LidarMain"
    }
    from(sourceSets.main.output) {
        exclude "com/spartronics4915/frc*/**"
    }
}

tomcatRunWar << {
    from configurations.pathWebappLibs.collect { it.isDirectory() ? it : zipTree(it) }
    from(sourceSets.main.output) {
        exclude "com/spartronics4915/frc*/**"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}
